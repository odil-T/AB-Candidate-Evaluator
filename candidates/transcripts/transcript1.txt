Интервьюер: Добрый день, Антон. Спасибо, что присоединились. Давайте начнём. Расскажите немного о себе и вашем опыте работы с Python.

Кандидат: Добрый день. Да, конечно. Я работаю с Python где-то три года. Начинал как джуниор в небольшой компании, мы там в основном писали скрипты для автоматизации, парсинг, ну и немного Flask. Сейчас я мидл-разработчик, занимаюсь бэкендом, работаю с FastAPI, PostgreSQL, и немного с Docker.

Интервьюер: Хорошо. А можете рассказать, с какими библиотеками или фреймворками чаще всего работаете?

Кандидат: Да, в основном это FastAPI, SQLAlchemy, иногда Celery для задач по расписанию. Ещё используем pydantic. Ну и всякие стандартные — requests, json, logging.

Интервьюер: Понял. А вот если говорить про SQLAlchemy — что вам больше нравится, ORM или работа с raw SQL?

Кандидат: Ну... ORM, наверное, удобнее. Хотя иногда, если нужно что-то сложное, типа оконных функций, мы используем прямые запросы. ORM не всегда... эээ... не всегда гибкий.

Интервьюер: Да, бывает. Хорошо. А расскажите, как вы обычно организуете структуру проекта на FastAPI?

Кандидат: Обычно делаем разбиение по слоям. Есть папка routers, где все endpoints, потом models, schemas, services. Ну и отдельно main.py, где всё стартует. Мы стараемся писать по принципу "чистой архитектуры", ну, насколько это возможно.

Интервьюер: Отлично. А тесты пишете?

Кандидат: Да, мы используем pytest. Обычно unit-тесты и немного интеграционных. Я не скажу, что прям супер покрытие, но стараемся. Иногда с фикстурами заморачиваемся, особенно для базы.

Интервьюер: Ага. Вот допустим, у вас есть API-метод, который создаёт нового пользователя. Что бы вы проверили в тестах?

Кандидат: Ну, во-первых, что он возвращает 200 или 201, потом что пользователь реально записался в базу. Потом, может быть, негативный кейс — если, например, не передали обязательное поле, должен быть 422 или какая там ошибка... ну, валидационная. И, наверное, проверил бы, что пароли хешируются, а не в открытом виде хранятся.

Интервьюер: Хорошо. А с асинхронностью в Python работали?

Кандидат: Да, FastAPI ж асинхронный. Мы там используем async def, await, иногда работаем с aiohttp, когда нужно что-то снаружи запрашивать. Хотя, честно говоря, не всегда понимаю, когда реально это даёт прирост. Ну, вроде, когда I/O операции, тогда да.

Интервьюер: Всё верно. А можете объяснить разницу между @staticmethod и @classmethod?

Кандидат: Эмм... да, кажется. @staticmethod — это просто функция внутри класса, но без ссылки на класс или экземпляр. А @classmethod — там идёт cls, и можно работать с самим классом. Мы его, по-моему, используем, когда нужно какой-то альтернативный конструктор сделать.

Интервьюер: Окей, хороший ответ. А были ли у вас случаи, когда приходилось сильно оптимизировать код? Можете привести пример?

Кандидат: Был один проект, где у нас парсинг занимал слишком много времени. Там был вложенный цикл, и он проходил по довольно большому словарю. Мы его заменили на словарь с индексами и использовали set вместо списка. Это сильно ускорило, ну, где-то в три раза, если не ошибаюсь.

Интервьюер: Понял. А с Docker как глубоко работали?

Кандидат: Мы пишем Dockerfile для микросервисов, используем docker-compose. Я не скажу, что прям DevOps, но умею собрать образ, запустить, пробросить порты и переменные. Иногда приходится конфиги писать для разных окружений.

Интервьюер: Отлично. Последний вопрос: как вы относитесь к код-ревью? Что для вас важно в этом процессе?

Кандидат: Мне кажется, это важно не только для качества, но и для команды. Я стараюсь писать читаемо, с аннотациями. Если что-то не нравится — обсуждаем. Иногда, конечно, бывает спорно, но лучше обсудить, чем молча мержить.

Интервьюер: Согласен. Спасибо большое, Антон. Мы с вами свяжемся после того, как проведём все интервью. Хорошего дня!

Кандидат: Спасибо вам тоже! До свидания.